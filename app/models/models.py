# generated by fastapi-codegen:
#   filename:  api.yaml
#   timestamp: 2024-04-11T17:46:42+00:00
from __future__ import annotations

from datetime import datetime
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Extra
from pydantic import Field


class UserBannerGetResponse(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class UserBannerGetResponse1(BaseModel):
    error: str | None = None


class UserBannerGetResponse2(BaseModel):
    error: str | None = None


class BannerGetResponse(BaseModel):
    banner_id: int | None = Field(None, description="Идентификатор баннера")
    tag_ids: list[int] | None = Field(None, description="Идентификаторы тэгов")
    feature_id: int | None = Field(None, description="Идентификатор фичи")
    content: dict[str, Any] | None = Field(
        None,
        description="Содержимое баннера",
        example='{"title": "some_title", "text": "some_text", "url": "some_url"}',
    )
    is_active: bool | None = Field(None, description="Флаг активности баннера")
    created_at: datetime | None = Field(None, description="Дата создания баннера")
    updated_at: datetime | None = Field(None, description="Дата обновления баннера")


class BannerGetResponse1(BaseModel):
    error: str | None = None


class BannerPostRequest(BaseModel):
    tag_ids: list[int] | None = Field(None, description="Идентификаторы тэгов")
    feature_id: int | None = Field(None, description="Идентификатор фичи")
    content: dict[str, Any] | None = Field(
        None,
        description="Содержимое баннера",
        example='{"title": "some_title", "text": "some_text", "url": "some_url"}',
    )
    is_active: bool | None = Field(None, description="Флаг активности баннера")


class BannerPostResponse(BaseModel):
    banner_id: int | None = Field(None, description="Идентификатор созданного баннера")


class BannerPostResponse1(BaseModel):
    error: str | None = None


class BannerPostResponse2(BaseModel):
    error: str | None = None


class BannerIdPatchRequest(BaseModel):
    tag_ids: list[int] | None = Field(None, description="Идентификаторы тэгов")
    feature_id: int | None = Field(None, description="Идентификатор фичи")
    content: dict[str, Any] | None = Field(
        None,
        description="Содержимое баннера",
        example='{"title": "some_title", "text": "some_text", "url": "some_url"}',
    )
    is_active: bool | None = Field(None, description="Флаг активности баннера")


class BannerIdPatchResponse(BaseModel):
    error: str | None = None


class BannerIdPatchResponse1(BaseModel):
    error: str | None = None


class BannerIdDeleteResponse(BaseModel):
    error: str | None = None


class BannerIdDeleteResponse1(BaseModel):
    error: str | None = None
